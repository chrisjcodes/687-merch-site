// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

enum Role {
  ADMIN
  CUSTOMER
}

enum JobStatus {
  QUEUED
  APPROVED
  IN_PROD
  READY
  SHIPPED
  DELIVERED
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  role          Role      @default(CUSTOMER)
  customerId    String?   @unique
  customer      Customer? @relation(fields: [customerId], references: [id])
  emailVerified DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@map("users")
}

model Customer {
  id          String   @id @default(cuid())
  name        String
  email       String   @unique
  phone       String?
  company     String?
  defaultShip Json?
  user        User?
  jobs        Job[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("customers")
}

model Job {
  id         String    @id @default(cuid())
  customerId String
  customer   Customer  @relation(fields: [customerId], references: [id])
  status     JobStatus @default(QUEUED)
  dueDate    DateTime?
  notes      String?
  items      JobItem[]
  events     Event[]
  proofs     Proof[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@map("jobs")
}

model JobItem {
  id            String  @id @default(cuid())
  jobId         String
  job           Job     @relation(fields: [jobId], references: [id], onDelete: Cascade)
  productSku    String
  variant       String?
  printSpec     Json
  qty           Int
  sizeBreakdown Json
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("job_items")
}

model Event {
  id        String   @id @default(cuid())
  jobId     String?
  job       Job?     @relation(fields: [jobId], references: [id], onDelete: Cascade)
  type      String
  payload   Json
  createdAt DateTime @default(now())

  @@map("events")
}

model Proof {
  id       String     @id @default(cuid())
  jobId    String
  job      Job        @relation(fields: [jobId], references: [id], onDelete: Cascade)
  imageUrl String
  version  Int
  status   ProofStatus @default(PENDING)
  notes    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("proofs")
}

enum ProofStatus {
  PENDING
  APPROVED
  CHANGES_REQUESTED
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}